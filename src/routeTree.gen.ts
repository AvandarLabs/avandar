/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as UpdatePasswordImport } from "./routes/update-password";
import { Route as SigninImport } from "./routes/signin";
import { Route as RegisterImport } from "./routes/register";
import { Route as ForgotPasswordImport } from "./routes/forgot-password";
import { Route as AuthRouteImport } from "./routes/_auth/route";
import { Route as AuthIndexImport } from "./routes/_auth/index";
import { Route as AuthProfileImport } from "./routes/_auth/profile";
import { Route as AuthDataExplorerImport } from "./routes/_auth/data-explorer";
import { Route as AuthEntityManagerRouteImport } from "./routes/_auth/entity-manager/route";
import { Route as AuthEntityDesignerRouteImport } from "./routes/_auth/entity-designer/route";
import { Route as AuthDataManagerRouteImport } from "./routes/_auth/data-manager/route";
import { Route as AuthEntityManagerIndexImport } from "./routes/_auth/entity-manager/index";
import { Route as AuthEntityDesignerIndexImport } from "./routes/_auth/entity-designer/index";
import { Route as AuthDataManagerIndexImport } from "./routes/_auth/data-manager/index";
import { Route as AuthEntityDesignerEntityCreatorImport } from "./routes/_auth/entity-designer/entity-creator";
import { Route as AuthEntityDesignerEntityConfigIdImport } from "./routes/_auth/entity-designer/$entityConfigId";
import { Route as AuthDataManagerDataImportImport } from "./routes/_auth/data-manager/data-import";
import { Route as AuthDataManagerDatasetIdImport } from "./routes/_auth/data-manager/$datasetId";
import { Route as AuthEntityManagerEntityConfigIdRouteImport } from "./routes/_auth/entity-manager/$entityConfigId/route";
import { Route as AuthEntityManagerEntityConfigIdIndexImport } from "./routes/_auth/entity-manager/$entityConfigId/index";
import { Route as AuthEntityManagerEntityConfigIdEntityIdImport } from "./routes/_auth/entity-manager/$entityConfigId/$entityId";

// Create/Update Routes

const UpdatePasswordRoute = UpdatePasswordImport.update({
  id: "/update-password",
  path: "/update-password",
  getParentRoute: () => rootRoute,
} as any);

const SigninRoute = SigninImport.update({
  id: "/signin",
  path: "/signin",
  getParentRoute: () => rootRoute,
} as any);

const RegisterRoute = RegisterImport.update({
  id: "/register",
  path: "/register",
  getParentRoute: () => rootRoute,
} as any);

const ForgotPasswordRoute = ForgotPasswordImport.update({
  id: "/forgot-password",
  path: "/forgot-password",
  getParentRoute: () => rootRoute,
} as any);

const AuthRouteRoute = AuthRouteImport.update({
  id: "/_auth",
  getParentRoute: () => rootRoute,
} as any);

const AuthIndexRoute = AuthIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AuthRouteRoute,
} as any);

const AuthProfileRoute = AuthProfileImport.update({
  id: "/profile",
  path: "/profile",
  getParentRoute: () => AuthRouteRoute,
} as any);

const AuthDataExplorerRoute = AuthDataExplorerImport.update({
  id: "/data-explorer",
  path: "/data-explorer",
  getParentRoute: () => AuthRouteRoute,
} as any);

const AuthEntityManagerRouteRoute = AuthEntityManagerRouteImport.update({
  id: "/entity-manager",
  path: "/entity-manager",
  getParentRoute: () => AuthRouteRoute,
} as any);

const AuthEntityDesignerRouteRoute = AuthEntityDesignerRouteImport.update({
  id: "/entity-designer",
  path: "/entity-designer",
  getParentRoute: () => AuthRouteRoute,
} as any);

const AuthDataManagerRouteRoute = AuthDataManagerRouteImport.update({
  id: "/data-manager",
  path: "/data-manager",
  getParentRoute: () => AuthRouteRoute,
} as any);

const AuthEntityManagerIndexRoute = AuthEntityManagerIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AuthEntityManagerRouteRoute,
} as any);

const AuthEntityDesignerIndexRoute = AuthEntityDesignerIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AuthEntityDesignerRouteRoute,
} as any);

const AuthDataManagerIndexRoute = AuthDataManagerIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AuthDataManagerRouteRoute,
} as any);

const AuthEntityDesignerEntityCreatorRoute =
  AuthEntityDesignerEntityCreatorImport.update({
    id: "/entity-creator",
    path: "/entity-creator",
    getParentRoute: () => AuthEntityDesignerRouteRoute,
  } as any);

const AuthEntityDesignerEntityConfigIdRoute =
  AuthEntityDesignerEntityConfigIdImport.update({
    id: "/$entityConfigId",
    path: "/$entityConfigId",
    getParentRoute: () => AuthEntityDesignerRouteRoute,
  } as any);

const AuthDataManagerDataImportRoute = AuthDataManagerDataImportImport.update({
  id: "/data-import",
  path: "/data-import",
  getParentRoute: () => AuthDataManagerRouteRoute,
} as any);

const AuthDataManagerDatasetIdRoute = AuthDataManagerDatasetIdImport.update({
  id: "/$datasetId",
  path: "/$datasetId",
  getParentRoute: () => AuthDataManagerRouteRoute,
} as any);

const AuthEntityManagerEntityConfigIdRouteRoute =
  AuthEntityManagerEntityConfigIdRouteImport.update({
    id: "/$entityConfigId",
    path: "/$entityConfigId",
    getParentRoute: () => AuthEntityManagerRouteRoute,
  } as any);

const AuthEntityManagerEntityConfigIdIndexRoute =
  AuthEntityManagerEntityConfigIdIndexImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => AuthEntityManagerEntityConfigIdRouteRoute,
  } as any);

const AuthEntityManagerEntityConfigIdEntityIdRoute =
  AuthEntityManagerEntityConfigIdEntityIdImport.update({
    id: "/$entityId",
    path: "/$entityId",
    getParentRoute: () => AuthEntityManagerEntityConfigIdRouteRoute,
  } as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_auth": {
      id: "/_auth";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof AuthRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/forgot-password": {
      id: "/forgot-password";
      path: "/forgot-password";
      fullPath: "/forgot-password";
      preLoaderRoute: typeof ForgotPasswordImport;
      parentRoute: typeof rootRoute;
    };
    "/register": {
      id: "/register";
      path: "/register";
      fullPath: "/register";
      preLoaderRoute: typeof RegisterImport;
      parentRoute: typeof rootRoute;
    };
    "/signin": {
      id: "/signin";
      path: "/signin";
      fullPath: "/signin";
      preLoaderRoute: typeof SigninImport;
      parentRoute: typeof rootRoute;
    };
    "/update-password": {
      id: "/update-password";
      path: "/update-password";
      fullPath: "/update-password";
      preLoaderRoute: typeof UpdatePasswordImport;
      parentRoute: typeof rootRoute;
    };
    "/_auth/data-manager": {
      id: "/_auth/data-manager";
      path: "/data-manager";
      fullPath: "/data-manager";
      preLoaderRoute: typeof AuthDataManagerRouteImport;
      parentRoute: typeof AuthRouteImport;
    };
    "/_auth/entity-designer": {
      id: "/_auth/entity-designer";
      path: "/entity-designer";
      fullPath: "/entity-designer";
      preLoaderRoute: typeof AuthEntityDesignerRouteImport;
      parentRoute: typeof AuthRouteImport;
    };
    "/_auth/entity-manager": {
      id: "/_auth/entity-manager";
      path: "/entity-manager";
      fullPath: "/entity-manager";
      preLoaderRoute: typeof AuthEntityManagerRouteImport;
      parentRoute: typeof AuthRouteImport;
    };
    "/_auth/data-explorer": {
      id: "/_auth/data-explorer";
      path: "/data-explorer";
      fullPath: "/data-explorer";
      preLoaderRoute: typeof AuthDataExplorerImport;
      parentRoute: typeof AuthRouteImport;
    };
    "/_auth/profile": {
      id: "/_auth/profile";
      path: "/profile";
      fullPath: "/profile";
      preLoaderRoute: typeof AuthProfileImport;
      parentRoute: typeof AuthRouteImport;
    };
    "/_auth/": {
      id: "/_auth/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof AuthIndexImport;
      parentRoute: typeof AuthRouteImport;
    };
    "/_auth/entity-manager/$entityConfigId": {
      id: "/_auth/entity-manager/$entityConfigId";
      path: "/$entityConfigId";
      fullPath: "/entity-manager/$entityConfigId";
      preLoaderRoute: typeof AuthEntityManagerEntityConfigIdRouteImport;
      parentRoute: typeof AuthEntityManagerRouteImport;
    };
    "/_auth/data-manager/$datasetId": {
      id: "/_auth/data-manager/$datasetId";
      path: "/$datasetId";
      fullPath: "/data-manager/$datasetId";
      preLoaderRoute: typeof AuthDataManagerDatasetIdImport;
      parentRoute: typeof AuthDataManagerRouteImport;
    };
    "/_auth/data-manager/data-import": {
      id: "/_auth/data-manager/data-import";
      path: "/data-import";
      fullPath: "/data-manager/data-import";
      preLoaderRoute: typeof AuthDataManagerDataImportImport;
      parentRoute: typeof AuthDataManagerRouteImport;
    };
    "/_auth/entity-designer/$entityConfigId": {
      id: "/_auth/entity-designer/$entityConfigId";
      path: "/$entityConfigId";
      fullPath: "/entity-designer/$entityConfigId";
      preLoaderRoute: typeof AuthEntityDesignerEntityConfigIdImport;
      parentRoute: typeof AuthEntityDesignerRouteImport;
    };
    "/_auth/entity-designer/entity-creator": {
      id: "/_auth/entity-designer/entity-creator";
      path: "/entity-creator";
      fullPath: "/entity-designer/entity-creator";
      preLoaderRoute: typeof AuthEntityDesignerEntityCreatorImport;
      parentRoute: typeof AuthEntityDesignerRouteImport;
    };
    "/_auth/data-manager/": {
      id: "/_auth/data-manager/";
      path: "/";
      fullPath: "/data-manager/";
      preLoaderRoute: typeof AuthDataManagerIndexImport;
      parentRoute: typeof AuthDataManagerRouteImport;
    };
    "/_auth/entity-designer/": {
      id: "/_auth/entity-designer/";
      path: "/";
      fullPath: "/entity-designer/";
      preLoaderRoute: typeof AuthEntityDesignerIndexImport;
      parentRoute: typeof AuthEntityDesignerRouteImport;
    };
    "/_auth/entity-manager/": {
      id: "/_auth/entity-manager/";
      path: "/";
      fullPath: "/entity-manager/";
      preLoaderRoute: typeof AuthEntityManagerIndexImport;
      parentRoute: typeof AuthEntityManagerRouteImport;
    };
    "/_auth/entity-manager/$entityConfigId/$entityId": {
      id: "/_auth/entity-manager/$entityConfigId/$entityId";
      path: "/$entityId";
      fullPath: "/entity-manager/$entityConfigId/$entityId";
      preLoaderRoute: typeof AuthEntityManagerEntityConfigIdEntityIdImport;
      parentRoute: typeof AuthEntityManagerEntityConfigIdRouteImport;
    };
    "/_auth/entity-manager/$entityConfigId/": {
      id: "/_auth/entity-manager/$entityConfigId/";
      path: "/";
      fullPath: "/entity-manager/$entityConfigId/";
      preLoaderRoute: typeof AuthEntityManagerEntityConfigIdIndexImport;
      parentRoute: typeof AuthEntityManagerEntityConfigIdRouteImport;
    };
  }
}

// Create and export the route tree

interface AuthDataManagerRouteRouteChildren {
  AuthDataManagerDatasetIdRoute: typeof AuthDataManagerDatasetIdRoute;
  AuthDataManagerDataImportRoute: typeof AuthDataManagerDataImportRoute;
  AuthDataManagerIndexRoute: typeof AuthDataManagerIndexRoute;
}

const AuthDataManagerRouteRouteChildren: AuthDataManagerRouteRouteChildren = {
  AuthDataManagerDatasetIdRoute: AuthDataManagerDatasetIdRoute,
  AuthDataManagerDataImportRoute: AuthDataManagerDataImportRoute,
  AuthDataManagerIndexRoute: AuthDataManagerIndexRoute,
};

const AuthDataManagerRouteRouteWithChildren =
  AuthDataManagerRouteRoute._addFileChildren(AuthDataManagerRouteRouteChildren);

interface AuthEntityDesignerRouteRouteChildren {
  AuthEntityDesignerEntityConfigIdRoute: typeof AuthEntityDesignerEntityConfigIdRoute;
  AuthEntityDesignerEntityCreatorRoute: typeof AuthEntityDesignerEntityCreatorRoute;
  AuthEntityDesignerIndexRoute: typeof AuthEntityDesignerIndexRoute;
}

const AuthEntityDesignerRouteRouteChildren: AuthEntityDesignerRouteRouteChildren =
  {
    AuthEntityDesignerEntityConfigIdRoute:
      AuthEntityDesignerEntityConfigIdRoute,
    AuthEntityDesignerEntityCreatorRoute: AuthEntityDesignerEntityCreatorRoute,
    AuthEntityDesignerIndexRoute: AuthEntityDesignerIndexRoute,
  };

const AuthEntityDesignerRouteRouteWithChildren =
  AuthEntityDesignerRouteRoute._addFileChildren(
    AuthEntityDesignerRouteRouteChildren,
  );

interface AuthEntityManagerEntityConfigIdRouteRouteChildren {
  AuthEntityManagerEntityConfigIdEntityIdRoute: typeof AuthEntityManagerEntityConfigIdEntityIdRoute;
  AuthEntityManagerEntityConfigIdIndexRoute: typeof AuthEntityManagerEntityConfigIdIndexRoute;
}

const AuthEntityManagerEntityConfigIdRouteRouteChildren: AuthEntityManagerEntityConfigIdRouteRouteChildren =
  {
    AuthEntityManagerEntityConfigIdEntityIdRoute:
      AuthEntityManagerEntityConfigIdEntityIdRoute,
    AuthEntityManagerEntityConfigIdIndexRoute:
      AuthEntityManagerEntityConfigIdIndexRoute,
  };

const AuthEntityManagerEntityConfigIdRouteRouteWithChildren =
  AuthEntityManagerEntityConfigIdRouteRoute._addFileChildren(
    AuthEntityManagerEntityConfigIdRouteRouteChildren,
  );

interface AuthEntityManagerRouteRouteChildren {
  AuthEntityManagerEntityConfigIdRouteRoute: typeof AuthEntityManagerEntityConfigIdRouteRouteWithChildren;
  AuthEntityManagerIndexRoute: typeof AuthEntityManagerIndexRoute;
}

const AuthEntityManagerRouteRouteChildren: AuthEntityManagerRouteRouteChildren =
  {
    AuthEntityManagerEntityConfigIdRouteRoute:
      AuthEntityManagerEntityConfigIdRouteRouteWithChildren,
    AuthEntityManagerIndexRoute: AuthEntityManagerIndexRoute,
  };

const AuthEntityManagerRouteRouteWithChildren =
  AuthEntityManagerRouteRoute._addFileChildren(
    AuthEntityManagerRouteRouteChildren,
  );

interface AuthRouteRouteChildren {
  AuthDataManagerRouteRoute: typeof AuthDataManagerRouteRouteWithChildren;
  AuthEntityDesignerRouteRoute: typeof AuthEntityDesignerRouteRouteWithChildren;
  AuthEntityManagerRouteRoute: typeof AuthEntityManagerRouteRouteWithChildren;
  AuthDataExplorerRoute: typeof AuthDataExplorerRoute;
  AuthProfileRoute: typeof AuthProfileRoute;
  AuthIndexRoute: typeof AuthIndexRoute;
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthDataManagerRouteRoute: AuthDataManagerRouteRouteWithChildren,
  AuthEntityDesignerRouteRoute: AuthEntityDesignerRouteRouteWithChildren,
  AuthEntityManagerRouteRoute: AuthEntityManagerRouteRouteWithChildren,
  AuthDataExplorerRoute: AuthDataExplorerRoute,
  AuthProfileRoute: AuthProfileRoute,
  AuthIndexRoute: AuthIndexRoute,
};

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
);

export interface FileRoutesByFullPath {
  "": typeof AuthRouteRouteWithChildren;
  "/forgot-password": typeof ForgotPasswordRoute;
  "/register": typeof RegisterRoute;
  "/signin": typeof SigninRoute;
  "/update-password": typeof UpdatePasswordRoute;
  "/data-manager": typeof AuthDataManagerRouteRouteWithChildren;
  "/entity-designer": typeof AuthEntityDesignerRouteRouteWithChildren;
  "/entity-manager": typeof AuthEntityManagerRouteRouteWithChildren;
  "/data-explorer": typeof AuthDataExplorerRoute;
  "/profile": typeof AuthProfileRoute;
  "/": typeof AuthIndexRoute;
  "/entity-manager/$entityConfigId": typeof AuthEntityManagerEntityConfigIdRouteRouteWithChildren;
  "/data-manager/$datasetId": typeof AuthDataManagerDatasetIdRoute;
  "/data-manager/data-import": typeof AuthDataManagerDataImportRoute;
  "/entity-designer/$entityConfigId": typeof AuthEntityDesignerEntityConfigIdRoute;
  "/entity-designer/entity-creator": typeof AuthEntityDesignerEntityCreatorRoute;
  "/data-manager/": typeof AuthDataManagerIndexRoute;
  "/entity-designer/": typeof AuthEntityDesignerIndexRoute;
  "/entity-manager/": typeof AuthEntityManagerIndexRoute;
  "/entity-manager/$entityConfigId/$entityId": typeof AuthEntityManagerEntityConfigIdEntityIdRoute;
  "/entity-manager/$entityConfigId/": typeof AuthEntityManagerEntityConfigIdIndexRoute;
}

export interface FileRoutesByTo {
  "/forgot-password": typeof ForgotPasswordRoute;
  "/register": typeof RegisterRoute;
  "/signin": typeof SigninRoute;
  "/update-password": typeof UpdatePasswordRoute;
  "/data-explorer": typeof AuthDataExplorerRoute;
  "/profile": typeof AuthProfileRoute;
  "/": typeof AuthIndexRoute;
  "/data-manager/$datasetId": typeof AuthDataManagerDatasetIdRoute;
  "/data-manager/data-import": typeof AuthDataManagerDataImportRoute;
  "/entity-designer/$entityConfigId": typeof AuthEntityDesignerEntityConfigIdRoute;
  "/entity-designer/entity-creator": typeof AuthEntityDesignerEntityCreatorRoute;
  "/data-manager": typeof AuthDataManagerIndexRoute;
  "/entity-designer": typeof AuthEntityDesignerIndexRoute;
  "/entity-manager": typeof AuthEntityManagerIndexRoute;
  "/entity-manager/$entityConfigId/$entityId": typeof AuthEntityManagerEntityConfigIdEntityIdRoute;
  "/entity-manager/$entityConfigId": typeof AuthEntityManagerEntityConfigIdIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/_auth": typeof AuthRouteRouteWithChildren;
  "/forgot-password": typeof ForgotPasswordRoute;
  "/register": typeof RegisterRoute;
  "/signin": typeof SigninRoute;
  "/update-password": typeof UpdatePasswordRoute;
  "/_auth/data-manager": typeof AuthDataManagerRouteRouteWithChildren;
  "/_auth/entity-designer": typeof AuthEntityDesignerRouteRouteWithChildren;
  "/_auth/entity-manager": typeof AuthEntityManagerRouteRouteWithChildren;
  "/_auth/data-explorer": typeof AuthDataExplorerRoute;
  "/_auth/profile": typeof AuthProfileRoute;
  "/_auth/": typeof AuthIndexRoute;
  "/_auth/entity-manager/$entityConfigId": typeof AuthEntityManagerEntityConfigIdRouteRouteWithChildren;
  "/_auth/data-manager/$datasetId": typeof AuthDataManagerDatasetIdRoute;
  "/_auth/data-manager/data-import": typeof AuthDataManagerDataImportRoute;
  "/_auth/entity-designer/$entityConfigId": typeof AuthEntityDesignerEntityConfigIdRoute;
  "/_auth/entity-designer/entity-creator": typeof AuthEntityDesignerEntityCreatorRoute;
  "/_auth/data-manager/": typeof AuthDataManagerIndexRoute;
  "/_auth/entity-designer/": typeof AuthEntityDesignerIndexRoute;
  "/_auth/entity-manager/": typeof AuthEntityManagerIndexRoute;
  "/_auth/entity-manager/$entityConfigId/$entityId": typeof AuthEntityManagerEntityConfigIdEntityIdRoute;
  "/_auth/entity-manager/$entityConfigId/": typeof AuthEntityManagerEntityConfigIdIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | ""
    | "/forgot-password"
    | "/register"
    | "/signin"
    | "/update-password"
    | "/data-manager"
    | "/entity-designer"
    | "/entity-manager"
    | "/data-explorer"
    | "/profile"
    | "/"
    | "/entity-manager/$entityConfigId"
    | "/data-manager/$datasetId"
    | "/data-manager/data-import"
    | "/entity-designer/$entityConfigId"
    | "/entity-designer/entity-creator"
    | "/data-manager/"
    | "/entity-designer/"
    | "/entity-manager/"
    | "/entity-manager/$entityConfigId/$entityId"
    | "/entity-manager/$entityConfigId/";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/forgot-password"
    | "/register"
    | "/signin"
    | "/update-password"
    | "/data-explorer"
    | "/profile"
    | "/"
    | "/data-manager/$datasetId"
    | "/data-manager/data-import"
    | "/entity-designer/$entityConfigId"
    | "/entity-designer/entity-creator"
    | "/data-manager"
    | "/entity-designer"
    | "/entity-manager"
    | "/entity-manager/$entityConfigId/$entityId"
    | "/entity-manager/$entityConfigId";
  id:
    | "__root__"
    | "/_auth"
    | "/forgot-password"
    | "/register"
    | "/signin"
    | "/update-password"
    | "/_auth/data-manager"
    | "/_auth/entity-designer"
    | "/_auth/entity-manager"
    | "/_auth/data-explorer"
    | "/_auth/profile"
    | "/_auth/"
    | "/_auth/entity-manager/$entityConfigId"
    | "/_auth/data-manager/$datasetId"
    | "/_auth/data-manager/data-import"
    | "/_auth/entity-designer/$entityConfigId"
    | "/_auth/entity-designer/entity-creator"
    | "/_auth/data-manager/"
    | "/_auth/entity-designer/"
    | "/_auth/entity-manager/"
    | "/_auth/entity-manager/$entityConfigId/$entityId"
    | "/_auth/entity-manager/$entityConfigId/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  AuthRouteRoute: typeof AuthRouteRouteWithChildren;
  ForgotPasswordRoute: typeof ForgotPasswordRoute;
  RegisterRoute: typeof RegisterRoute;
  SigninRoute: typeof SigninRoute;
  UpdatePasswordRoute: typeof UpdatePasswordRoute;
}

const rootRouteChildren: RootRouteChildren = {
  AuthRouteRoute: AuthRouteRouteWithChildren,
  ForgotPasswordRoute: ForgotPasswordRoute,
  RegisterRoute: RegisterRoute,
  SigninRoute: SigninRoute,
  UpdatePasswordRoute: UpdatePasswordRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/forgot-password",
        "/register",
        "/signin",
        "/update-password"
      ]
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/data-manager",
        "/_auth/entity-designer",
        "/_auth/entity-manager",
        "/_auth/data-explorer",
        "/_auth/profile",
        "/_auth/"
      ]
    },
    "/forgot-password": {
      "filePath": "forgot-password.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/signin": {
      "filePath": "signin.tsx"
    },
    "/update-password": {
      "filePath": "update-password.tsx"
    },
    "/_auth/data-manager": {
      "filePath": "_auth/data-manager/route.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/data-manager/$datasetId",
        "/_auth/data-manager/data-import",
        "/_auth/data-manager/"
      ]
    },
    "/_auth/entity-designer": {
      "filePath": "_auth/entity-designer/route.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/entity-designer/$entityConfigId",
        "/_auth/entity-designer/entity-creator",
        "/_auth/entity-designer/"
      ]
    },
    "/_auth/entity-manager": {
      "filePath": "_auth/entity-manager/route.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/entity-manager/$entityConfigId",
        "/_auth/entity-manager/"
      ]
    },
    "/_auth/data-explorer": {
      "filePath": "_auth/data-explorer.tsx",
      "parent": "/_auth"
    },
    "/_auth/profile": {
      "filePath": "_auth/profile.tsx",
      "parent": "/_auth"
    },
    "/_auth/": {
      "filePath": "_auth/index.tsx",
      "parent": "/_auth"
    },
    "/_auth/entity-manager/$entityConfigId": {
      "filePath": "_auth/entity-manager/$entityConfigId/route.tsx",
      "parent": "/_auth/entity-manager",
      "children": [
        "/_auth/entity-manager/$entityConfigId/$entityId",
        "/_auth/entity-manager/$entityConfigId/"
      ]
    },
    "/_auth/data-manager/$datasetId": {
      "filePath": "_auth/data-manager/$datasetId.tsx",
      "parent": "/_auth/data-manager"
    },
    "/_auth/data-manager/data-import": {
      "filePath": "_auth/data-manager/data-import.tsx",
      "parent": "/_auth/data-manager"
    },
    "/_auth/entity-designer/$entityConfigId": {
      "filePath": "_auth/entity-designer/$entityConfigId.tsx",
      "parent": "/_auth/entity-designer"
    },
    "/_auth/entity-designer/entity-creator": {
      "filePath": "_auth/entity-designer/entity-creator.tsx",
      "parent": "/_auth/entity-designer"
    },
    "/_auth/data-manager/": {
      "filePath": "_auth/data-manager/index.tsx",
      "parent": "/_auth/data-manager"
    },
    "/_auth/entity-designer/": {
      "filePath": "_auth/entity-designer/index.tsx",
      "parent": "/_auth/entity-designer"
    },
    "/_auth/entity-manager/": {
      "filePath": "_auth/entity-manager/index.tsx",
      "parent": "/_auth/entity-manager"
    },
    "/_auth/entity-manager/$entityConfigId/$entityId": {
      "filePath": "_auth/entity-manager/$entityConfigId/$entityId.tsx",
      "parent": "/_auth/entity-manager/$entityConfigId"
    },
    "/_auth/entity-manager/$entityConfigId/": {
      "filePath": "_auth/entity-manager/$entityConfigId/index.tsx",
      "parent": "/_auth/entity-manager/$entityConfigId"
    }
  }
}
ROUTE_MANIFEST_END */
