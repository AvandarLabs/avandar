/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as UpdatePasswordImport } from "./routes/update-password";
import { Route as SigninImport } from "./routes/signin";
import { Route as RegisterImport } from "./routes/register";
import { Route as ForgotPasswordImport } from "./routes/forgot-password";
import { Route as AuthRouteImport } from "./routes/_auth/route";
import { Route as AuthIndexImport } from "./routes/_auth/index";
import { Route as AuthProfileImport } from "./routes/_auth/profile";
import { Route as AuthDataExplorerImport } from "./routes/_auth/data-explorer";
import { Route as AuthDataManagerIndexImport } from "./routes/_auth/data-manager/index";
import { Route as AuthDataManagerDatasetIdImport } from "./routes/_auth/data-manager/$datasetId";

// Create/Update Routes

const UpdatePasswordRoute = UpdatePasswordImport.update({
  id: "/update-password",
  path: "/update-password",
  getParentRoute: () => rootRoute,
} as any);

const SigninRoute = SigninImport.update({
  id: "/signin",
  path: "/signin",
  getParentRoute: () => rootRoute,
} as any);

const RegisterRoute = RegisterImport.update({
  id: "/register",
  path: "/register",
  getParentRoute: () => rootRoute,
} as any);

const ForgotPasswordRoute = ForgotPasswordImport.update({
  id: "/forgot-password",
  path: "/forgot-password",
  getParentRoute: () => rootRoute,
} as any);

const AuthRouteRoute = AuthRouteImport.update({
  id: "/_auth",
  getParentRoute: () => rootRoute,
} as any);

const AuthIndexRoute = AuthIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AuthRouteRoute,
} as any);

const AuthProfileRoute = AuthProfileImport.update({
  id: "/profile",
  path: "/profile",
  getParentRoute: () => AuthRouteRoute,
} as any);

const AuthDataExplorerRoute = AuthDataExplorerImport.update({
  id: "/data-explorer",
  path: "/data-explorer",
  getParentRoute: () => AuthRouteRoute,
} as any);

const AuthDataManagerIndexRoute = AuthDataManagerIndexImport.update({
  id: "/data-manager/",
  path: "/data-manager/",
  getParentRoute: () => AuthRouteRoute,
} as any);

const AuthDataManagerDatasetIdRoute = AuthDataManagerDatasetIdImport.update({
  id: "/data-manager/$datasetId",
  path: "/data-manager/$datasetId",
  getParentRoute: () => AuthRouteRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_auth": {
      id: "/_auth";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof AuthRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/forgot-password": {
      id: "/forgot-password";
      path: "/forgot-password";
      fullPath: "/forgot-password";
      preLoaderRoute: typeof ForgotPasswordImport;
      parentRoute: typeof rootRoute;
    };
    "/register": {
      id: "/register";
      path: "/register";
      fullPath: "/register";
      preLoaderRoute: typeof RegisterImport;
      parentRoute: typeof rootRoute;
    };
    "/signin": {
      id: "/signin";
      path: "/signin";
      fullPath: "/signin";
      preLoaderRoute: typeof SigninImport;
      parentRoute: typeof rootRoute;
    };
    "/update-password": {
      id: "/update-password";
      path: "/update-password";
      fullPath: "/update-password";
      preLoaderRoute: typeof UpdatePasswordImport;
      parentRoute: typeof rootRoute;
    };
    "/_auth/data-explorer": {
      id: "/_auth/data-explorer";
      path: "/data-explorer";
      fullPath: "/data-explorer";
      preLoaderRoute: typeof AuthDataExplorerImport;
      parentRoute: typeof AuthRouteImport;
    };
    "/_auth/profile": {
      id: "/_auth/profile";
      path: "/profile";
      fullPath: "/profile";
      preLoaderRoute: typeof AuthProfileImport;
      parentRoute: typeof AuthRouteImport;
    };
    "/_auth/": {
      id: "/_auth/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof AuthIndexImport;
      parentRoute: typeof AuthRouteImport;
    };
    "/_auth/data-manager/$datasetId": {
      id: "/_auth/data-manager/$datasetId";
      path: "/data-manager/$datasetId";
      fullPath: "/data-manager/$datasetId";
      preLoaderRoute: typeof AuthDataManagerDatasetIdImport;
      parentRoute: typeof AuthRouteImport;
    };
    "/_auth/data-manager/": {
      id: "/_auth/data-manager/";
      path: "/data-manager";
      fullPath: "/data-manager";
      preLoaderRoute: typeof AuthDataManagerIndexImport;
      parentRoute: typeof AuthRouteImport;
    };
  }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
  AuthDataExplorerRoute: typeof AuthDataExplorerRoute;
  AuthProfileRoute: typeof AuthProfileRoute;
  AuthIndexRoute: typeof AuthIndexRoute;
  AuthDataManagerDatasetIdRoute: typeof AuthDataManagerDatasetIdRoute;
  AuthDataManagerIndexRoute: typeof AuthDataManagerIndexRoute;
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthDataExplorerRoute: AuthDataExplorerRoute,
  AuthProfileRoute: AuthProfileRoute,
  AuthIndexRoute: AuthIndexRoute,
  AuthDataManagerDatasetIdRoute: AuthDataManagerDatasetIdRoute,
  AuthDataManagerIndexRoute: AuthDataManagerIndexRoute,
};

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
);

export interface FileRoutesByFullPath {
  "": typeof AuthRouteRouteWithChildren;
  "/forgot-password": typeof ForgotPasswordRoute;
  "/register": typeof RegisterRoute;
  "/signin": typeof SigninRoute;
  "/update-password": typeof UpdatePasswordRoute;
  "/data-explorer": typeof AuthDataExplorerRoute;
  "/profile": typeof AuthProfileRoute;
  "/": typeof AuthIndexRoute;
  "/data-manager/$datasetId": typeof AuthDataManagerDatasetIdRoute;
  "/data-manager": typeof AuthDataManagerIndexRoute;
}

export interface FileRoutesByTo {
  "/forgot-password": typeof ForgotPasswordRoute;
  "/register": typeof RegisterRoute;
  "/signin": typeof SigninRoute;
  "/update-password": typeof UpdatePasswordRoute;
  "/data-explorer": typeof AuthDataExplorerRoute;
  "/profile": typeof AuthProfileRoute;
  "/": typeof AuthIndexRoute;
  "/data-manager/$datasetId": typeof AuthDataManagerDatasetIdRoute;
  "/data-manager": typeof AuthDataManagerIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/_auth": typeof AuthRouteRouteWithChildren;
  "/forgot-password": typeof ForgotPasswordRoute;
  "/register": typeof RegisterRoute;
  "/signin": typeof SigninRoute;
  "/update-password": typeof UpdatePasswordRoute;
  "/_auth/data-explorer": typeof AuthDataExplorerRoute;
  "/_auth/profile": typeof AuthProfileRoute;
  "/_auth/": typeof AuthIndexRoute;
  "/_auth/data-manager/$datasetId": typeof AuthDataManagerDatasetIdRoute;
  "/_auth/data-manager/": typeof AuthDataManagerIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | ""
    | "/forgot-password"
    | "/register"
    | "/signin"
    | "/update-password"
    | "/data-explorer"
    | "/profile"
    | "/"
    | "/data-manager/$datasetId"
    | "/data-manager";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/forgot-password"
    | "/register"
    | "/signin"
    | "/update-password"
    | "/data-explorer"
    | "/profile"
    | "/"
    | "/data-manager/$datasetId"
    | "/data-manager";
  id:
    | "__root__"
    | "/_auth"
    | "/forgot-password"
    | "/register"
    | "/signin"
    | "/update-password"
    | "/_auth/data-explorer"
    | "/_auth/profile"
    | "/_auth/"
    | "/_auth/data-manager/$datasetId"
    | "/_auth/data-manager/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  AuthRouteRoute: typeof AuthRouteRouteWithChildren;
  ForgotPasswordRoute: typeof ForgotPasswordRoute;
  RegisterRoute: typeof RegisterRoute;
  SigninRoute: typeof SigninRoute;
  UpdatePasswordRoute: typeof UpdatePasswordRoute;
}

const rootRouteChildren: RootRouteChildren = {
  AuthRouteRoute: AuthRouteRouteWithChildren,
  ForgotPasswordRoute: ForgotPasswordRoute,
  RegisterRoute: RegisterRoute,
  SigninRoute: SigninRoute,
  UpdatePasswordRoute: UpdatePasswordRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/forgot-password",
        "/register",
        "/signin",
        "/update-password"
      ]
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/data-explorer",
        "/_auth/profile",
        "/_auth/",
        "/_auth/data-manager/$datasetId",
        "/_auth/data-manager/"
      ]
    },
    "/forgot-password": {
      "filePath": "forgot-password.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/signin": {
      "filePath": "signin.tsx"
    },
    "/update-password": {
      "filePath": "update-password.tsx"
    },
    "/_auth/data-explorer": {
      "filePath": "_auth/data-explorer.tsx",
      "parent": "/_auth"
    },
    "/_auth/profile": {
      "filePath": "_auth/profile.tsx",
      "parent": "/_auth"
    },
    "/_auth/": {
      "filePath": "_auth/index.tsx",
      "parent": "/_auth"
    },
    "/_auth/data-manager/$datasetId": {
      "filePath": "_auth/data-manager/$datasetId.tsx",
      "parent": "/_auth"
    },
    "/_auth/data-manager/": {
      "filePath": "_auth/data-manager/index.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
